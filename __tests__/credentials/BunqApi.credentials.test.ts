import { BunqApi } from '../../credentials/BunqApi.credentials';
import { INodeProperties } from 'n8n-workflow';

describe('BunqApi Credentials', () => {
	let bunqApiCredentials: BunqApi;

	beforeEach(() => {
		bunqApiCredentials = new BunqApi();
	});

	describe('Credential Properties', () => {
		it('should have correct credential name and display name', () => {
			expect(bunqApiCredentials.name).toBe('bunqApi');
			expect(bunqApiCredentials.displayName).toBe('bunq API');
			expect(bunqApiCredentials.documentationUrl).toBe('https://doc.bunq.com/');
		});

		it('should have all required properties', () => {
			const properties = bunqApiCredentials.properties;
			const propertyNames = properties.map((prop: INodeProperties) => prop.name);
			
			expect(propertyNames).toContain('environment');
			expect(propertyNames).toContain('apiKey');
			expect(propertyNames).toContain('showAdvanced');
			expect(propertyNames).toContain('installationToken');
			expect(propertyNames).toContain('deviceId');
			expect(propertyNames).toContain('sessionToken');
			expect(propertyNames).toContain('privateKey');
			expect(propertyNames).toContain('publicKey');
		});

		it('should have environment options', () => {
			const environmentProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'environment'
			);
			
			expect(environmentProperty).toBeDefined();
			expect(environmentProperty?.options).toHaveLength(2);
			expect(environmentProperty?.options).toEqual([
				{ name: 'Production', value: 'production' },
				{ name: 'Sandbox', value: 'sandbox' }
			]);
			expect(environmentProperty?.default).toBe('sandbox');
		});

		it('should have API key as required field', () => {
			const apiKeyProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'apiKey'
			);
			
			expect(apiKeyProperty).toBeDefined();
			expect(apiKeyProperty?.required).toBe(true);
			expect(apiKeyProperty?.type).toBe('string');
			expect(apiKeyProperty?.typeOptions?.password).toBe(true);
		});

		it('should have showAdvanced field with proper configuration', () => {
			const showAdvancedProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'showAdvanced'
			);
			
			expect(showAdvancedProperty).toBeDefined();
			expect(showAdvancedProperty?.type).toBe('boolean');
			expect(showAdvancedProperty?.default).toBe(false);
			expect(showAdvancedProperty?.required).toBeFalsy();
		});

		it('should have auto-generated fields as not required', () => {
			const autoGeneratedFields = [
				'installationToken',
				'deviceId', 
				'sessionToken',
				'privateKey',
				'publicKey'
			];

			autoGeneratedFields.forEach(fieldName => {
				const property = bunqApiCredentials.properties.find(
					(prop: INodeProperties) => prop.name === fieldName
				);
				
				expect(property).toBeDefined();
				expect(property?.required).toBeFalsy();
				expect(property?.description).toContain('automatically');
			});
		});

		it('should have advanced fields hidden by default', () => {
			const advancedFields = [
				'installationToken',
				'deviceId', 
				'sessionToken',
				'privateKey',
				'publicKey'
			];

			advancedFields.forEach(fieldName => {
				const property = bunqApiCredentials.properties.find(
					(prop: INodeProperties) => prop.name === fieldName
				);
				
				expect(property).toBeDefined();
				expect(property?.displayOptions?.show?.showAdvanced).toEqual([true]);
			});
		});

		it('should have proper field types', () => {
			const stringFields = [
				'apiKey',
				'installationToken',
				'deviceId',
				'sessionToken',
				'privateKey',
				'publicKey'
			];

			stringFields.forEach(fieldName => {
				const property = bunqApiCredentials.properties.find(
					(prop: INodeProperties) => prop.name === fieldName
				);
				expect(property?.type).toBe('string');
			});

			// Environment is 'options' type, not 'string'
			const environmentProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'environment'
			);
			expect(environmentProperty?.type).toBe('options');

			// showAdvanced is 'boolean' type, not 'string'
			const showAdvancedProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'showAdvanced'
			);
			expect(showAdvancedProperty?.type).toBe('boolean');
		});
	});

	describe('Credential Testing', () => {
		it('should have test configuration', () => {
			expect(bunqApiCredentials.test).toBeDefined();
			expect(bunqApiCredentials.test?.request).toBeDefined();
		});

		it('should configure test request correctly', () => {
			const testRequest = bunqApiCredentials.test?.request as any;
			
			expect(testRequest.baseURL).toBe('={{$credentials.environment === "production" ? "https://api.bunq.com" : "https://public-api.sandbox.bunq.com"}}');
			expect(testRequest.url).toBe('/v1/user');
			expect(testRequest.method).toBe('GET');
		});

		it('should have authentication properties', () => {
			expect(bunqApiCredentials.authenticate).toBeDefined();
			expect(bunqApiCredentials.authenticate.type).toBe('generic');
			expect(bunqApiCredentials.authenticate.properties.headers).toBeDefined();
			
			const headers = bunqApiCredentials.authenticate.properties.headers;
			expect(headers && headers['X-Bunq-Language']).toBe('en_US');
			expect(headers && headers['X-Bunq-Region']).toBe('nl_NL');
			expect(headers && headers['X-Bunq-Client-Authentication']).toBe('={{$credentials.sessionToken}}');
		});
	});

	describe('Icon Configuration', () => {
		it('should not have icon property (handled by node)', () => {
			expect((bunqApiCredentials as any).icon).toBeUndefined();
		});
	});

	describe('Field Validation', () => {
		it('should have proper descriptions', () => {
			const apiKeyProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'apiKey'
			);
			
			expect(apiKeyProperty?.description).toBe('Your bunq API key');
		});

		it('should have helpful descriptions', () => {
			const environmentProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'environment'
			);
			
			expect(environmentProperty?.description).toContain('environment');
		});

		it('should explain auto-generation for generated fields', () => {
			const privateKeyProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'privateKey'
			);
			
			expect(privateKeyProperty?.description).toContain('automatically');
		});
	});

	describe('Security Features', () => {
		it('should mark sensitive fields as password type', () => {
			const sensitiveFields = ['apiKey', 'installationToken', 'sessionToken', 'privateKey'];
			
			sensitiveFields.forEach(fieldName => {
				const property = bunqApiCredentials.properties.find(
					(prop: INodeProperties) => prop.name === fieldName
				);
				
				expect(property?.typeOptions?.password).toBe(true);
			});
		});

		it('should have device ID as non-password field', () => {
			const deviceIdProperty = bunqApiCredentials.properties.find(
				(prop: INodeProperties) => prop.name === 'deviceId'
			);
			
			expect(deviceIdProperty?.typeOptions?.password).toBeFalsy();
		});

		it('should have proper field ordering', () => {
			const expectedOrder = [
				'environment',
				'apiKey',
				'showAdvanced',
				'installationToken',
				'deviceId',
				'sessionToken',
				'privateKey',
				'publicKey'
			];
			
			const actualOrder = bunqApiCredentials.properties.map(
				(prop: INodeProperties) => prop.name
			);
			
			expect(actualOrder).toEqual(expectedOrder);
		});
	});
});